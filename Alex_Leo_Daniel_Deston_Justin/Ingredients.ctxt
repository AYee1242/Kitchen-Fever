#BlueJ class context
comment0.target=Ingredients
comment0.text=\n\ The\ Ingredients\ class\ works\ along\ with\ the\ Chef\ class\ to\ create\n\ instances\ of\ different\ types\ of\ food\ such\ as\ meat,\ vegetables,\ and\ \n\ grains\ which\ are\ used\ by\ the\ chefs.\ Each\ instance\ of\ meat,\ vegetables,\n\ or\ grains\ has\ its\ own\ unique\ properties\ to\ determine\ how\ it\ is\ being\n\ processed\ (chopped\ or\ cooked),\ and\ acts\ appropriately\ based\ on\ which\ part\n\ of\ the\ process\ it\ is\ going\ through.\n\n\ Within\ the\ Ingredients\ class,\ an\ interesting\ aspect\ to\ take\ note\ of\ is\ that\ many\ of\ the\ \n\ methods\ within\ the\ class\ are\ called\ on\ through\ the\ Chef\ class,\ thus\ showing\ how\ the\ two\n\ major\ superclasses\ within\ the\ program\ interact\ closely\ to\ make\ the\ program\ function\ smoothly.\ \n\ For\ example,\ many\ methods\ deal\ with\ Greenfoot\ Images\ to\ effectively\ animate\ and\ process\ food\ or\ calculate\n\ the\ time\ for\ which\ food\ is\ cooked\ before\ it\ is\ burnt\ are\ stored\ within\ the\ Food\ class,\ and\ are\ further\ \n\ implemented\ to\ work\ alongside\ the\ Chefs\ after\ such\ objects\ are\ created\ in\ the\ world.\ These\ methods\ are\ \n\ specifically\ optimized\ in\ order\ to\ reduce\ redundant\ code\ and\ bring\ out\ the\ benefits\ of\ \n\ Object\ Oriented\ Programming\ due\ to\ their\ interactivity\ with\ the\ Food\ class.\ \n\ \n\ In\ addition,\ our\ class\ fully\ utilizes\ the\ benefits\ of\ Object\ Oriented\ Programming\ because\ many\ instances\ of\ \n\ each\ object\ can\ be\ created,\ and\ they\ will\ all\ work\ the\ same\ in\ our\ simulation\ because\ of\ how\ our\ methods\ \n\ were\ generalized.\ As\ a\ result,\ no\ matter\ what\ type\ of\ object\ or\ how\ many\ of\ them\ there\ are,\ it\ will\ all\ work\ \n\ seamlessly\ with\ our\ simulation.\n\ \n\ @author\ Deston\ Wong\n\ @author\ Justin\ Huynh\n\ @version\ October\ 2018\n
comment1.params=
comment1.target=void\ act()
comment1.text=\n\ A\ method\ which\ runs\ for\ each\ instance\ of\ Food\ in\ the\ world.\ Repeatedly\ checks\ if\ ingredients\ are\ cooked\ \n\ or\ chopped\ so\ they\ can\ act\ according\ to\ actions\ of\ the\ Chef\ class.\n
comment10.params=
comment10.target=java.lang.String\ getName()
comment10.text=\n\ Getter\ method\ to\ determine\ the\ name\ of\ the\ ingredient\n\ \n\ @return\ String\ The\ name\ of\ the\ current\ ingredient\n
comment11.params=time
comment11.target=void\ setCookingTime(int)
comment11.text=\n\ Set\ cooking\ time\ \n\ \n\ @param\ int\ How\ long\ the\ ingredient\ takes\ to\ cook\n
comment12.params=
comment12.target=int\ getCookingTime()
comment12.text=\n\ resets\ cutting\ time\ \n
comment2.params=
comment2.target=void\ placeFoodOffset()
comment3.params=
comment3.target=void\ foodBurningAnimate()
comment4.params=
comment4.target=void\ setCookingOrChoppingImage()
comment5.params=
comment5.target=void\ PickUp()
comment5.text=\n\ Determines\ the\ actions\ of\ the\ food\ when\ it\ is\ picked\ up,\ after\ it\ has\ been\ either\ \n\ chopped\ or\ cooked.\ Is\ called\ upon\ throughout\ methods\ in\ the\ Chef\ class.\n\ \n
comment6.params=position
comment6.target=void\ Process(int)
comment6.text=\n\ Initializes\ boolean\ allowing\ for\ animations\ to\ occur.\ Is\ called\ upon\ throughout\ methods\ in\ the\ Chef\ class.\ \n\ \n\ @param\ position\ Position\ of\ the\ ingredient\ relative\ to\ which\ pan\ it\ is\ going\ on\n
comment7.params=
comment7.target=boolean\ getCooking()
comment7.text=\n\ Getter\ method\ to\ determine\ whether\ the\ ingredient\ is\ cooking.\n\ \n\ @return\ boolean\ True\ if\ ingredient\ is\ being\ cooked\ \n
comment8.params=
comment8.target=boolean\ getCooked()
comment8.text=\n\ Getter\ method\ to\ determine\ whether\ the\ ingredient\ is\ fully\ cooked.\n\ \n\ @return\ boolean\ True\ if\ ingredient\ is\ fully\ cooked\ \n
comment9.params=
comment9.target=boolean\ getChopped()
comment9.text=\n\ Getter\ method\ to\ determine\ whether\ the\ ingredient\ is\ chopped.\n\ \n\ @return\ boolean\ True\ if\ ingredient\ is\ chopped\n
numComments=13
